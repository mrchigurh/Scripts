--Auto Market
local terminal = game:GetService("Workspace").Stations.SpaceStation.Modules.MarketExpanded.Terminal
local buycheck = 0
local LP = game:GetService("Players").LocalPlayer
--FUNCTIONS
function Storage()
    local FinalCalc = {}
    for i,v in pairs(game:GetService("Players").RakishiFelto.PlayerGui.Market.Window.Storage.View.Items.Grid:GetChildren()) do
        local FixedTitle = string.gsub(v.Title.Text, " ", "") and string.gsub(v.Title.Text, "-", "") and string.gsub(v.Title.Text, "%s+", "")
        local getdata = require(game:GetService("ReplicatedStorage").Source.Client.Fetchers.MarketData)
        local itemdata = getdata.getMarketSummaryForItem(FixedTitle)
        local buy = itemdata.Offers.Buy
        local Calc = tonumber(v.Quantity.Text) * buy
        print("["..FixedTitle.."]".." : "..math.floor(Calc).." Credits")
        table.insert(FinalCalc, "["..FixedTitle.."]".." : "..math.floor(Calc).." Credits")
    end
    return FinalCalc
end
function autobuy(item, desvolume, maxbuy)
    local getdata = require(game:GetService("ReplicatedStorage").Source.Client.Fetchers.MarketData)
    local itemdata = getdata.getMarketSummaryForItem(item)
    local buy = itemdata.Offers.Buy
    local tablebuy = tostring(buy):split(".")
    local tablesell = tostring(sell):split(".")
    local buyorder = game:GetService("ReplicatedStorage").Remote.Market.CreateBuyOrder
    local buyx
    spawn(function()
        pcall(function()
            if tablebuy[2] == "95" then
                buyx = 95
            else
                if string.find(tablebuy[2], "5") then
                    buyx = tablebuy[2] + 5 
                    print(buyx.."- did find 5 | [DecimalSorter]".. " ----- ".."["..item.."]")
                else
                    buyx = tablebuy[2] * 10 + 5
                    print(buyx.."- didnt find 5 | [DecimalSorter]".. " ----- ".."["..item.."]")
                end
            end
        end)
    end)
    spawn(function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Market.Window.Market.Orders.Buy.View.Items:GetChildren()) do
            local FixedPrice = string.gsub(v.Price.Text, ",", "") 
            local FixedTitle_1 = string.gsub(v.Title.Text, " I", "1") and string.gsub(v.Title.Text, " II", "2") and string.gsub(v.Title.Text, " III", "3")
            local FixedTitle_2 = string.gsub(FixedTitle_1, " ", "") and string.gsub(FixedTitle_1, "-", "") and string.gsub(FixedTitle_1, "%s+", "")
            local FixedTitle_3 = string.gsub(FixedTitle_2, "Coilgun", "Coil")
            local FixedSMiner2 = string.gsub(v.Title.Text, "Precision Miner II", "PreciseMiner2")
            local FixedTitle_Final = FixedTitle_3
            local FixedBP = string.gsub(FixedTitle_2, "blueprint", "")
            local FixedBP2 = "Blueprint_"..FixedBP
            if FixedTitle_Final == item or FixedSMiner2 == item or FixedBP2 == item then
                    if tonumber(FixedPrice) < buy then
                    --print("AutoCancel Success - Cancelling Order | ".. " ----- ".."["..item.."]")
                    qu:cprintf(119, 255, 8, "AutoCancel Success - Cancelling Order | ".. " ----- ".."["..item.."]")
                    wait(.5)
                    local priceabs = v.Price.AbsolutePosition
                    mousemoveabs(priceabs.X, priceabs.Y + 35)
                    wait(.3)
                    mouse1click()
                    wait(.5)
                    mousemoveabs(1150 + 50, 769 + 60)
                    wait(.5)
                    mouse1click()
                    mousemoveabs(870, 589 + 35)
                    wait(.2)
                    mouse1click()
                else
                    qu:cprintf(255, 99, 99, "AutoCancel Failed- Already top order!".. " ----- ".."["..item.."]")
                end
            end
        end
    end)
    wait(2)
    if buy <= maxbuy then
        if buyx ~= 95 and buy <= 100 then 
            buycheck = buy + .10
            print(buyx .. " | [Decimal Order]".. " ----- ".."["..item.."]")
            buyorder:FireServer(terminal, item, desvolume, tonumber(tablebuy[1]), tonumber(buyx), false)
        else
            buycheck = buy + .10
            print("[Whole Order]".. " ----- ".."["..item.."]")
            buyorder:FireServer(terminal, item, desvolume, tonumber(tablebuy[1]) + 1, 0, false)
        end
    else
        print("Above Max_Buy".. " ----- ".."["..item.."]")
    end
end
function profitmargin(item)
    local getdata = require(game:GetService("ReplicatedStorage").Source.Client.Fetchers.MarketData)
    local itemdata = getdata.getMarketSummaryForItem(item)
    local buy = itemdata.Offers.Buy
    local sell = itemdata.Offers.Sell
    local profit = sell - buy
    local profit2  = sell / buy
    local net = math.floor((profit2 - 1) * 100).."%"
    print(net.." ["..math.floor(profit).." Credits]".." -- ["..item.."]")
    return net
end
function autosell(item, desvolume, minsell)
    if desvolume == 0 then
        desvolume = GetItemVolume(item)
        print("itemvolcheck TRUE")
        print(desvolume)
    else
        print("itemvolcheck FALSE")
    end
    local getdata = require(game:GetService("ReplicatedStorage").Source.Client.Fetchers.MarketData)
    local itemdata = getdata.getMarketSummaryForItem(item)
    local sell = itemdata.Offers.Sell
    local tablebuy = tostring(buy):split(".")
    local tablesell = tostring(sell):split(".")
    local sellorder = game:GetService("ReplicatedStorage").Remote.Market.CreateSellOrder
    local sellx = 0
    spawn(function()
        pcall(function()
            if tablesell[2] == "95" then
                sellx = 95
            else
                if string.find(tablesell[2], "5") then
                    sellx = tablesell[2] - 5 
                    print(sellx.."- did find 5 | [DecimalSorter]".. " ----- ".."["..item.."]")
                else
                    sellx = tablesell[2] * 10 - 5
                    print(sellx.."- didnt find 5 | [DecimalSorter]".. " ----- ".."["..item.."]")
                end
            end
        end)
    end)
    spawn(function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.PlayerGui.Market.Window.Market.Orders.Sell.View.Items:GetChildren()) do
            local FixedPrice = string.gsub(v.Price.Text, ",", "") 
            local FixedTitle_1 = string.gsub(v.Title.Text, " I", "1") and string.gsub(v.Title.Text, " II", "2") and string.gsub(v.Title.Text, " III", "3")
            local FixedTitle_2 = string.gsub(FixedTitle_1, " ", "") and string.gsub(FixedTitle_1, "-", "") and string.gsub(FixedTitle_1, "%s+", "")
            local FixedTitle_3 = string.gsub(FixedTitle_2, "Coilgun", "Coil")
            local FixedSMiner2 = string.gsub(v.Title.Text, "Precision Miner II", "PreciseMiner2")
            local FixedTitle_Final = FixedTitle_3
            if FixedTitle_Final == item or FixedSMiner2 == item then
                if tonumber(FixedPrice) > sell then
                    qu:cprintf(119, 255, 8, "AutoCancel Success - Cancelling Order | ".. " ----- ".."["..item.."]")
                    wait(2)
                    local priceabs = v.Price.AbsolutePosition
                    mousemoveabs(priceabs.X, priceabs.Y + 35)
                    wait(.3)
                    mouse1click()
                    wait(.5)
                    mousemoveabs(1150 + 50, 769 + 60)
                    wait(.5)
                    mouse1click()
                    mousemoveabs(870, 589 + 35)
                    wait(.1)
                    mouse1click()
                else
                    qu:cprintf(255, 99, 99, "AutoCancel Failed- Already top order!".. " ----- ".."["..item.."]")
                end
            end
        end
    end)
    wait(1)
    if sell >= minsell then
        if sellx ~= 95 and sell <= 100 then 
            sellcheck = sell - .10
            print(" | [Decimal Order]".. " ----- ".."["..item.."]")
            print(sellx)
            sellorder:FireServer(terminal, "Storage",item, desvolume, tonumber(tablesell[1]), tonumber(sellx), false)
        else
            sellcheck = sell - .10
            print("[Whole Order]".. " ----- ".."["..item.."]")
            sellorder:FireServer(terminal, "Storage", item, desvolume, tonumber(tablesell[1]) - 1, 0, false)
        end
    else
        print("Below Min Sell".. " ----- ".."["..item.."]")
    end
end
function GetItemVolume(item)
    for i,v in pairs(LP.PlayerGui.Market.Window.Storage.View.Items.Grid:GetChildren()) do
        local FixedTitle_1 = string.gsub(v.Title.Text, " I", "1") and string.gsub(v.Title.Text, " II", "2") and string.gsub(v.Title.Text, " III", "3")
        local FixedTitle_2 = string.gsub(FixedTitle_1, " ", "") and string.gsub(FixedTitle_1, "-", "") and string.gsub(FixedTitle_1, "%s+", "")
        local FixedTitle_3 = string.gsub(FixedTitle_2, "Coilgun", "Coil")
        local FixedSMiner2 = string.gsub(v.Title.Text, "Precision Miner II", "PreciseMiner2")
        local FixedTitle_Final = FixedTitle_3
        wait(.1)
        if FixedTitle_Final == item or FixedSMiner2 == item then
            return tonumber(v.Quantity.Text)
        end
    end
end
--UI-- 
local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()
--WINDOWS--
local w = library:CreateWindow("Buy Order") -- Creates the window
local w2 = library:CreateWindow("Sell Order")
local w3 = library:CreateWindow("Other")
--FOLDERS--
local F_1 = w:CreateFolder("Order 1") 
local guibuyitem_1
local guibuyvolume_1
local guimaxbuy_1
--BOXES--
F_1:Box("Item_Buy","string",function(value) -- "number" or "string"//im not familiar with this, ive never used this before lmao
   guibuyitem_1 = value
end)
F_1:Box("Volume_Buy","number",function(value) -- "number" or "string"//im not familiar with this, ive never used this before lmao
   guibuyvolume_1 = value
end)
F_1:Box("Max_Buy","number",function(value) -- "number" or "string"//im not familiar with this, ive never used this before lmao
   guimaxbuy_1 = value
end)
--BUTTON--
F_1:Button("Execute",function()
   print(guibuyitem_1,guibuyvolume_1,guimaxbuy_1)
   while wait(10) do
        autobuy(tostring(guibuyitem_1),tonumber(guibuyvolume_1),tonumber(guimaxbuy_1))
    end
end)
--SELL--
--FOLDERS--
local SF_1 = w2:CreateFolder("Order 1") 
--CANCER--
local guisellitem_1
local guisellvolume_1
local guiminsell_1
--BOXES--
SF_1:Box("Item_Sell","string",function(value) -- "number" or "string"//im not familiar with this, ive never used this before lmao
   guisellitem_1 = value
end)
SF_1:Box("Volume_Sell","number",function(value) -- "number" or "string"//im not familiar with this, ive never used this before lmao
   guisellvolume_1 = value
end)
SF_1:Box("Min_Sell_Price","number",function(value) -- "number" or "string"//im not familiar with this, ive never used this before lmao
   guiminsell_1 = value
end)
--BUTTON--
SF_1:Button("Execute",function()
   print(guisellitem_1,guisellvolume_1,guiminsell_1)
   while wait(10) do
        autosell(tostring(guisellitem_1),tonumber(guisellvolume_1),tonumber(guiminsell_1))
    end
end)
--OTHER TAB--
local PF_3 = w3:CreateFolder("Credits")
local PF_1 = w3:CreateFolder("Profit Margin (F9)")
local PF_2 = w3:CreateFolder("Misc")
local GUIProfitCalc 
PF_3:Label("Creator: yumm#4723",{
   TextSize = 17; -- Self Explaining
   TextColor = Color3.fromRGB(255,255,255); -- Self Explanatory
   BgColor = Color3.fromRGB(69,69,69); -- Self Explanatory
})

PF_1:Box("Item","string",function(value) -- "number" or "string"//im not familiar with this, ive never used this before lmao
   GUIProfitCalc = value
end)
PF_1:Button("Execute",function()
    profitmargin(GUIProfitCalc)
end)
PF_2:Toggle("Max Volume [SELL]",function(bool) 
   _G.ItemVolumeCheck = bool
end)
