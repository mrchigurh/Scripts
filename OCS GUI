--// config 

getgenv().ItemInfo = {}
getgenv().RareItems = {
    ['LaunchCodes'] = true,
    ['Tesla APA'] = true,
    ['APA'] = true,
}
getgenv().AF_BlackListedItems = {}
getgenv().AF_AutoStoreItems = {}

-- // variables
local TweenService = game:GetService('TweenService')

local player = game.Players.LocalPlayer
local lootNodes = game:GetService("Workspace").WorkspaceStuff.LootNodes

local pickupFn = game:GetService("ReplicatedStorage").RemoteEvents.PickUpLoot
local saveItemFn = game:GetService("ReplicatedStorage").RemoteEvents.SaveFunc

local uis = game:GetService('UserInputService')
local camera = game.Workspace.CurrentCamera

local gameGroup = 8027732
local repItems = game.ReplicatedStorage:WaitForChild('ItemTools')

local swingMelee = game:GetService('ReplicatedStorage').RemoteEvents.SwingMelee


local tbl = {}
for _, ins in ipairs(repItems:GetChildren()) do
    table.insert(tbl, ins.Name)
    ItemInfo[ins.Name] = {}
end
table.sort(tbl, function(a,b) return a < b end)

local pickupMax = {}
local teleportLocations = {
    [1] =CFrame.new(428.0681457519531, 407.63580322265625, 748),
    [2] = CFrame.new(-749.1795654296875, 380.125244140625, 845.8096923828125),
    [3] = CFrame.new(84.73257446289062, 465.4793701171875, -624.1764526367188),
    [4] = CFrame.new(-1211.81591796875, 302.73065185546875, -2568.527099609375),
    [5] = CFrame.new(-3414.690673828125, 576.6998901367188, -3201.881591796875),
}

-- // global env 

if scriptLoaded == nil then
    
    getgenv().espObjects = {}
    espObjects['Items'] = {}
    
    getgenv().toggles = {}
    toggles['Items'] = false
    toggles['AutoPickup'] = false
    toggles['FastStore'] = false
    toggles['Safezone'] = false
    toggles['Autofarm'] = false
    toggles['KillAura'] = false
    
    _G['AutoPickup'] = nil
end

local miscConnections = {}
local defaultHeadSize = Vector3.new()

-- // functions 

local function destroyStructures()
    
end


local function tweenParts(part1, part2)
    local tweenInfo = TweenInfo.new(.1)
    local tween = TweenService:Create(part1, tweenInfo, { CFrame = part2.CFrame * CFrame.new(0,-10,0) })
    tween:Play()
    tween.Completed:Wait()
end


local function fireproximityprompt(Obj, Amount, Skip)
    if Obj.ClassName == "ProximityPrompt" then 
        Amount = Amount or 1
        local PromptTime = Obj.HoldDuration
        if Skip then 
            Obj.HoldDuration = 0
        end
        for i = 1, Amount do 
            Obj:InputHoldBegin()
            if not Skip then 
                wait(Obj.HoldDuration)
            end
            Obj:InputHoldEnd()
        end
        Obj.HoldDuration = PromptTime
    else 
        error("userdata<ProximityPrompt> expected")
    end
end

local function getSellPrompt()
    for _, ins in ipairs(game:GetService("Workspace").WorkspaceStuff.ResourceProcessing:GetChildren()) do
        if ins:FindFirstChild('Screen') then
            return ins.Screen.Prompt
        end
    end
end

local function toggleAutoFarm()
    if toggles['Autofarm'] then
        
        for i,cframePos in pairs(teleportLocations) do
             if #lootNodes:GetChildren() == 0 then continue end
            player.Character.PrimaryPart.CFrame = cframePos
            player.Character.PrimaryPart.Anchored = true
            local lootNodes = lootNodes:GetChildren()
           table.sort(lootNodes, function(a,b) return (a.Position - player.Character.PrimaryPart.Position).Magnitude < (b.Position - player.Character.PrimaryPart.Position).Magnitude end)
           
            
            
            for _, nodeInstance in ipairs(lootNodes) do
                local currentDis = (nodeInstance.Position - player.Character.PrimaryPart.Position).Magnitude
                
                if #player.Backpack:GetChildren() >= 7 then
                    player.Character.PrimaryPart.Anchored = true
                    --yield until all items are sold to a npc.
                    player.Character.PrimaryPart.CFrame = CFrame.new(1315.89771, 341.226837, -816.980835)
                    task.wait(.2)
                    player.Character.PrimaryPart.Anchored = false
                    --do auto sell shit
                    for _, tool in ipairs(player.Backpack:GetChildren()) do
                        tool.Parent = player.Character
                        task.wait(.1)
                        
                        fireproximityprompt(getSellPrompt(), 1, false)
                        repeat fireproximityprompt(getSellPrompt(), 1, false) ; task.wait(1)until tool.Parent == nil or tool == nil or player.Character:FindFirstChildWhichIsA('Tool') == nil
                    end
                end
                
                if #nodeInstance:GetChildren() == 0 then continue end
                if nodeInstance:FindFirstChildWhichIsA('Model') == nil or nodeInstance:FindFirstChildWhichIsA('Model').PrimaryPart == nil then continue end
                if AF_BlackListedItems[nodeInstance:FindFirstChildWhichIsA('Model').Name] then print(nodeInstance:FindFirstChildWhichIsA('Model').Name .. ' blacklisted...') ; continue end
                player.Character.PrimaryPart.Anchored = true
                player.Character.PrimaryPart.CFrame *= CFrame.new(0,-10,0)
                tweenParts(player.Character.PrimaryPart, nodeInstance)
               --layer.Character.PrimaryPart.CFrame = nodeInstance.CFrame * CFrame.new(0,2,0)
                local itemName = nodeInstance:FindFirstChildWhichIsA('Model').Name
                
                if AF_AutoStoreItems[nodeInstance:FindFirstChildWhichIsA('Model').Name] then
                    pickupFn:InvokeServer(itemName, nodeInstance)
                    task.wait(2)
                    player.Backpack:FindFirstChild(itemName).Parent = player.Character
                    saveItemFn:InvokeServer(player.Character:FindFirstChildWhichIsA('Tool'))
                    continue
                end
                
                print(itemName, nodeInstance.Name)
                if currentDis > 50 then 
                    task.wait(5)
                elseif currentDis < 10 then
                    task.wait(.5)
                else
                    task.wait(2.75)
                end
                
                player.Character.PrimaryPart.CFrame = nodeInstance.CFrame * CFrame.new(0,2,0)
                player.Character.PrimaryPart.Anchored = false

                for i = 1,2 do
                pickupFn:InvokeServer(itemName, nodeInstance)
                task.wait()
                end
                
                task.wait(.1)
                if not toggles['Autofarm'] then return end
            end
            
            task.wait(7) --wait for stuff to load in 
        end

    else
        player.Character.PrimaryPart.Anchored = false
    end
end


local function toggleAutoPickup(boolValue)
    if boolValue == false or toggles['AutoPickup'] == false and _G['AutoPickup'] ~= nil then
        local s, e = pcall(function()
            _G['AutoPickup']:Disconnect()
        end)
        if e then
            return
        end
        if s then
            _G['AutoPickup'] = nil
            print('Disconnected Auto Pick Up')
        end
    else
        _G['AutoPickup'] = game:GetService('RunService').RenderStepped:Connect(function()
            
            for _, ins in ipairs(lootNodes:GetChildren()) do
                if (ins.Position - player.Character.HumanoidRootPart.Position).Magnitude > 10 or #ins:GetChildren() == 0  then continue end 
                
                if pickupMax[ins] == nil then
                    pickupMax[ins] = 1
                else 
                    pickupMax[ins] += 1
                    if pickupMax[ins] > 4 then continue end
                end
                
                pickupFn:InvokeServer(ins:FindFirstChildWhichIsA('Model').Name, ins)
            end
        end)
    end
end

local function meleeKillAll()
    for _, plr in ipairs(game.Players:GetPlayers()) do
        if plr.Name == game.Players.LocalPlayer.Name then continue end
        if plr.Character == nil then continue end
        if plr.Character.PrimaryPart == nil then continue end
        if plr:GetAttribute('InSafezone') == true then continue end
        if (player.Character.PrimaryPart.Position - plr.Character.PrimaryPart.Position).Magnitude > 80 then continue end
        if player.Character.Humanoid.Health == 0 or player.Character.Humanoid:GetState() == Enum.HumanoidStateType.Dead then continue end
        
        task.spawn(function()
            for i = 1,15 do
                pcall(function()
                swingMelee:FireServer(player.Character:FindFirstChildWhichIsA('Tool').Name, {plr.Character.Head, plr.Character.PrimaryPart})
                end)
                task.wait()
            end
        end)
    end
end

local function silentAll()
for _, plr in ipairs(game.Players:GetPlayers()) do
        if plr.Name == game.Players.LocalPlayer.Name then continue end
        if plr.Character == nil then continue end
        if plr.Character.PrimaryPart == nil then continue end
        if plr:GetAttribute('InSafezone') == true then continue end
        if plr.Character.Humanoid.Seated == true then continue end
        print(plr.Character.Humanoid.Seated)
        plr.Character.Head.Anchored = true
        plr.Character.Head.CFrame = player.Character.Head.CFrame * CFrame.new(0,0,-10)
        plr.Character.Head.Size = Vector3.new(20,20,20)
        plr.Character.Head.Transparency = 1
    end
end

function toArray(dict, check)
    local t = {}
    for key, value in pairs(dict) do
        if check == 'K' then
            table.insert(t, key)
        elseif check == 'V' then
            table.insert(t, value)
        else
            table.insert(t, key)
        end
    end
    return t
end

function esp(item, tag)
    if espObjects[tag][item] ~= nil then return warn('Instance already has a esp object...') end
    
    local itemesp = Drawing.new('Text')
    
    --if ItemInfo[item.Parent.Name] == nil then
        --ItemInfo[item.Parent.Name] = {}
    --end
    
    itemesp.Visible = true
    itemesp.Center = true
    itemesp.Outline = true
    itemesp.Font = 1
    itemesp.Color = ItemInfo[item.Parent.Name]['Color'] or Color3.fromRGB(255,255,255)
    itemesp.Size = ItemInfo[item.Parent.Name]['Size'] or 18
    itemesp.Text = item.Parent.Name
    
    espObjects[tag][item] = itemesp
end

-- // signals
if scriptLoaded == nil then
    warn('loaded connections')
    task.spawn(function()
        while task.wait(.1) do
            if not toggles['KillAura'] then continue end
            
            meleeKillAll()
        end
    end)
        
    uis.InputBegan:Connect(function(input)
        if input.KeyCode == Enum.KeyCode.V then
            if not toggles['FastStore'] then return end
            saveItemFn:InvokeServer(player.Character:FindFirstChildWhichIsA('Tool'))
        end
    end)
    
    -- esp updater
    game:GetService('RunService').RenderStepped:Connect(function()
        for key, tbl in pairs(espObjects) do
            for instance, espObj in pairs(tbl) do
                if instance == nil or instance.Parent == nil then
                    espObj.Visible = false
                    espObj:Remove()
                    espObjects[key][instance] = nil
                    continue
                end
                local item_pos, item_onscreen = camera:WorldToViewportPoint(instance.Position)
                local magnitude = math.floor((instance.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude)
                if item_onscreen and toggles[key] then
                    espObj.Position = Vector2.new(item_pos.X, item_pos.Y)
                    espObj.Color = ItemInfo[instance.Parent.Name]['Color'] or Color3.fromRGB(255,255,255)
                    espObj.Visible = true
                else
                    espObj.Visible = false
                end
            end
        end
    end) 
    
    lootNodes.ChildAdded:Connect(function(child)
        task.wait(.1)
        if child:FindFirstChildWhichIsA('Model') then
            task.wait(.1)
            pcall(function()
                esp(child:FindFirstChildWhichIsA('Model').PrimaryPart, 'Items')
            end)
        end
        
        if miscConnections[child] then
            miscConnections[child]:Disconnect()
            miscConnections[child] = nil
        end
    
        miscConnections[child] = child.ChildAdded:Connect(function(child2)
            if child2:IsA('Model') or table.find(tbl, child2.Name) then
                esp(child2.PrimaryPart, 'Items')
            end
        end)
    end)
    
    for _, instance in ipairs(lootNodes:GetChildren()) do
        if #instance:GetChildren() == 0 then continue end
        if instance:FindFirstChildWhichIsA('Model') == nil or instance:FindFirstChildWhichIsA('Model').PrimaryPart == nil then continue end
        esp(instance:FindFirstChildWhichIsA('Model').PrimaryPart, 'Items')
    end
else
    warn('Already loaded...')
end

-- // LINORIA UI | https://github.com/violin-suzutsuki/LinoriaLib | NOT BY ME

local repo = 'https://raw.githubusercontent.com/wally-rblx/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Orange Colored Skies | LeechDiamond483 | discord.gg/CtwBHdf2MV',
    Center = true, 
    AutoShow = true,
})

local Tabs = {
    Main = Window:AddTab('Main'), 
    EspSettings = Window:AddTab('ESP Settings'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

local LeftGroupBox = Tabs.Main:AddLeftGroupbox('ESP')
local mainGroupBox2 = Tabs.Main:AddLeftGroupbox('Client')
local AutofarmGroupBox = Tabs.Main:AddLeftGroupbox('Autofarm')
local gunModifierGroupBox = Tabs.Main:AddRightGroupbox('Gun Mods')
local espGroupBox = Tabs.EspSettings:AddLeftGroupbox('Esp Settings')

AutofarmGroupBox:AddToggle('Autofarm', {
    Text = 'Enable Auto Farm',
    Default = false, 
    Tooltip = 'Farm items and sell them to a vendor NPC',
})

LeftGroupBox:AddToggle('ItemEsp', {
    Text = 'Item Esp',
    Default = false, 
    Tooltip = 'Activate item esp',
})

mainGroupBox2:AddToggle('AutoPickUpItems', {
    Text = 'Auto Pick Up Items',
    Default = false, 
    Tooltip = 'When within a certain amount of studs automatically pick up items.',
})

mainGroupBox2:AddToggle('KillAura', {
    Text = 'Melee Kill Aura',
    Default = false, 
    Tooltip = 'Equip a melee weapon, preferably the axe and kill people around u'
})


mainGroupBox2:AddToggle('FastStore', {
    Text = 'Fast Store',
    Default = false, 
    Tooltip = 'When you press V, the items will instantly store in your backpack.',
})

mainGroupBox2:AddToggle('Safezone', {
    Text = 'Disable Safe Zone',
    Default = false, 
    Tooltip = 'Makes it so you can shoot while inside a safe zone.',
})

espGroupBox:AddDropdown('MyMultiDropdown', {
    -- Default is the numeric index (e.g. "This" would be 1 since it if first in the values list)
    -- Default also accepts a string as well

    -- Currently you can not set multiple values with a dropdown
    Values = tbl,
    Default = toArray(RareItems, 'K'),
    Multi = true, -- true / false, allows multiple choices to be selected

    Text = 'Rare Items',
    Tooltip = 'Select rare items to take effect', -- Information shown when you hover over the dropdown

    Callback = function(Value)
        RareItems = Value
        for itemName, boolValue in pairs(RareItems) do
            if ItemInfo[itemName] ~= nil then
                ItemInfo[itemName]['Color'] = Options.RareItemColor.Value
            end
        end
    end
})

espGroupBox:AddLabel('Rare Items Color'):AddColorPicker('RareItemColor', {
    Default = Color3.new(0, 1, 0), -- Bright green
    Title = 'Rare Item Color', -- Optional. Allows you to have a custom color picker title (when you open it)
    Transparency = 0, -- Optional. Enables transparency changing for this color picker (leave as nil to disable)

    Callback = function(Value)
        for itemName, boolValue in pairs(RareItems) do
            if ItemInfo[itemName] ~= nil then
                ItemInfo[itemName]['Color'] = Value
            end
        end
    end
})

Toggles.ItemEsp:OnChanged(function()
    toggles['Items'] = Toggles.ItemEsp.Value
end)

Toggles.AutoPickUpItems:OnChanged(function()
    toggles['AutoPickup'] = Toggles.AutoPickUpItems.Value
    toggleAutoPickup(toggles['AutoPickup'])
end)

Toggles.FastStore:OnChanged(function()
    toggles['FastStore'] = Toggles.FastStore.Value
end)

Toggles.Safezone:OnChanged(function()
    toggles['Safezone'] = Toggles.Safezone.Value
    game.Players.LocalPlayer:SetAttribute("InSafezone", not toggles['Safezone'])
end)

Toggles.Autofarm:OnChanged(function()
    toggles['Autofarm'] = Toggles.Autofarm.Value 
    toggleAutoFarm()
end)

Toggles.KillAura:OnChanged(function()
    toggles['KillAura'] = Toggles.KillAura.Value
end)

local removeNicknameButton = mainGroupBox2:AddButton({
    Text = 'Remove Nickname',
    Func = function()
        game.Players.LocalPlayer.Character.HumanoidRootPart.Nickname:Destroy()
    end,
    DoubleClick = false,
    Tooltip = 'Players cant see your name above your head, reset to get it back.'
})

local teleportToGeocacheButton = mainGroupBox2:AddButton({
    Text = 'TP Geocache',
    Func = function()
        if game:GetService("Workspace"):FindFirstChild('Crate') == nil then return warn('No Geocache In Gmae') end
        game.Players.LocalPlayer.Character.PrimaryPart.CFrame = game:GetService("Workspace").Crate.PrimaryPart.CFrame * CFrame.new(0,-7,0)
        game.Players.LocalPlayer.Character.PrimaryPart.Anchored = true
    end,
    DoubleClick = false,
    Tooltip = 'Players cant see your name above your head, reset to get it back.'
})

gunModifierGroupBox:AddSlider('FireRate', {
    Text = 'Firerate',
    Default = 0,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        local gunConfig = require(player.Character:FindFirstChildWhichIsA('Tool').Config)
        gunConfig['Firerate'] = gunConfig['Firerate'] * Value
    end
})

gunModifierGroupBox:AddSlider('Bulletspread', {
    Text = 'Bulletspread',
    Default = 0,
    Min = 0,
    Max = 10,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        local gunConfig = require(player.Character:FindFirstChildWhichIsA('Tool').Config)
        gunConfig['Bulletspread'] = Value
    end
})

gunModifierGroupBox:AddSlider('Reloadspeed', {
    Text = 'Reload Speed',
    Default = .01,
    Min = 0,
    Max = 5,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        local gunConfig = require(player.Character:FindFirstChildWhichIsA('Tool').Config)
        gunConfig['ReloadSpeed'] = Value
    end
})

gunModifierGroupBox:AddSlider('Recoil', {
    Text = 'Recoil',
    Default = 1,
    Min = 0,
    Max = 5,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        local gunConfig = require(player.Character:FindFirstChildWhichIsA('Tool').Config)
        gunConfig['Recoil'] = {Value, Value, Value, Value}
    end
})

gunModifierGroupBox:AddSlider('GunSoundVolume', {
    Text = 'Gun Sound Volume',
    Default = .1,
    Min = 0,
    Max = 10,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        local gunConfig = require(player.Character:FindFirstChildWhichIsA('Tool').Config)
        gunConfig['FireSoundVolume'] = Value
        gunConfig['FireSound'] = 0
        gunConfig['HitSound'] = 0
        gunConfig['ReloadSoundVolume'] = Value
    end
})

gunModifierGroupBox:AddSlider('Head Hitboxes', {
    Text = 'Head Hitbox Expander',
    Default = 1,
    Min = 1,
    Max = 30,
    Rounding = 1,
    Compact = false,

    Callback = function(Value)
        for _, plr in ipairs(game.Players:GetPlayers()) do 
            if plr.Name == player.Name then continue end
            if not plr.Character then continue end
            if not plr.Character:FindFirstChild('Head') then continue end
            plr.Character.Head.Size = player.Character.Head.Size * Value
        end
    end
})





-- // Library functions

Library:OnUnload(function()
    print('Unloaded!')
    Library.Unloaded = true
end)

local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings() 
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 
ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')
SaveManager:BuildConfigSection(Tabs['UI Settings']) 
ThemeManager:ApplyToTab(Tabs['UI Settings'])

getgenv().scriptLoaded = true
